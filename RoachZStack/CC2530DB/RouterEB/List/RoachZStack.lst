###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             18/Sep/2013  16:11:59 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  C:\Users\emwhitmi\Documents\GitHub\RoachZStack\Roa #
#                          chZStack\Source\RoachZStack.c                      #
#    Command line       =  -f C:\Users\emwhitmi\Documents\GitHub\RoachZStack\ #
#                          RoachZStack\CC2530DB\..\..\Tools\CC2530DB\f8wRoute #
#                          r.cfg (-DCPU32MHZ -DROOT=__near_func               #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                   #
#                          C:\Users\emwhitmi\Documents\GitHub\RoachZStack\Roa #
#                          chZStack\CC2530DB\..\..\Tools\CC2530DB\f8wConfig.c #
#                          fg (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0   #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\emwhitmi\Documents #
#                          \GitHub\RoachZStack\RoachZStack\Source\RoachZStack #
#                          .c -D HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D        #
#                          LCD_SUPPORTED -lC C:\Users\emwhitmi\Documents\GitH #
#                          ub\RoachZStack\RoachZStack\CC2530DB\RouterEB\List\ #
#                           -lA C:\Users\emwhitmi\Documents\GitHub\RoachZStac #
#                          k\RoachZStack\CC2530DB\RouterEB\List\              #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          C:\Users\emwhitmi\Documents\GitHub\RoachZStack\Roa #
#                          chZStack\CC2530DB\RouterEB\Obj\ -e                 #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I C:\Users\emwhitmi\Documents\GitHub\RoachZStack\ #
#                          RoachZStack\CC2530DB\ -I                           #
#                          C:\Users\emwhitmi\Documents\GitHub\RoachZStack\Roa #
#                          chZStack\CC2530DB\..\Source\ -I                    #
#                          C:\Users\emwhitmi\Documents\GitHub\RoachZStack\Roa #
#                          chZStack\CC2530DB\..\..\ZMain\TI2530DB\ -I         #
#                          "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Compone #
#                          nts\hal\include\" -I "C:\Texas                     #
#                          Instruments\ZStack-CC2530-2.5.1a\Components\hal\ta #
#                          rget\CC2530EB\" -I "C:\Texas                       #
#                          Instruments\ZStack-CC2530-2.5.1a\Components\mac\in #
#                          clude\" -I "C:\Texas Instruments\ZStack-CC2530-2.5 #
#                          .1a\Components\mac\high_level\" -I "C:\Texas       #
#                          Instruments\ZStack-CC2530-2.5.1a\Components\mac\lo #
#                          w_level\srf04\" -I "C:\Texas                       #
#                          Instruments\ZStack-CC2530-2.5.1a\Components\mac\lo #
#                          w_level\srf04\single_chip\" -I "C:\Texas           #
#                          Instruments\ZStack-CC2530-2.5.1a\Components\mt\"   #
#                          -I "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Comp #
#                          onents\osal\include\" -I "C:\Texas                 #
#                          Instruments\ZStack-CC2530-2.5.1a\Components\servic #
#                          es\saddr\" -I "C:\Texas Instruments\ZStack-CC2530- #
#                          2.5.1a\Components\services\sdata\" -I "C:\Texas    #
#                          Instruments\ZStack-CC2530-2.5.1a\Components\stack\ #
#                          af\" -I "C:\Texas Instruments\ZStack-CC2530-2.5.1a #
#                          \Components\stack\nwk\" -I "C:\Texas               #
#                          Instruments\ZStack-CC2530-2.5.1a\Components\stack\ #
#                          sapi\" -I "C:\Texas Instruments\ZStack-CC2530-2.5. #
#                          1a\Components\stack\sec\" -I "C:\Texas             #
#                          Instruments\ZStack-CC2530-2.5.1a\Components\stack\ #
#                          sys\" -I "C:\Texas Instruments\ZStack-CC2530-2.5.1 #
#                          a\Components\stack\zdo\" -I "C:\Texas              #
#                          Instruments\ZStack-CC2530-2.5.1a\Components\zmac\" #
#                           -I "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Com #
#                          ponents\zmac\f8w\" -Ohz --require_prototypes       #
#    List file          =  C:\Users\emwhitmi\Documents\GitHub\RoachZStack\Roa #
#                          chZStack\CC2530DB\RouterEB\List\RoachZStack.lst    #
#    Object file        =  C:\Users\emwhitmi\Documents\GitHub\RoachZStack\Roa #
#                          chZStack\CC2530DB\RouterEB\Obj\RoachZStack.r51     #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\emwhitmi\Documents\GitHub\RoachZStack\RoachZStack\Source\RoachZStack.c
      1          /**************************************************************************************************
      2            Filename:       RoachZStack.c
      3            Revised:        $Date: 2009-03-29 10:51:47 -0700 (Sun, 29 Mar 2009) $
      4            Revision:       $Revision: 19585 $
      5          
      6            Description -   Serial Transfer Application (no Profile).
      7          
      8          
      9            Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, 
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com. 
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This sample application is basically a cable replacement
     42            and it should be customized for your application. A PC
     43            (or other device) sends data via the serial port to this
     44            application's device.  This device transmits the message
     45            to another device with the same application running. The
     46            other device receives the over-the-air message and sends
     47            it to a PC (or other device) connected to its serial port.
     48          				
     49            This application doesn't have a profile, so it handles everything directly.
     50          
     51            Key control:
     52              SW1:
     53              SW2:  initiates end device binding
     54              SW3:
     55              SW4:  initiates a match description request
     56          *********************************************************************/
     57          
     58          /*********************************************************************
     59           * INCLUDES
     60           */
     61          
     62          #include "AF.h"
     63          #include "OnBoard.h"
     64          #include "OSAL_Tasks.h"
     65          #include "RoachZStack.h"
     66          #include "ZDApp.h"
     67          #include "ZDObject.h"
     68          #include "ZDProfile.h"
     69          
     70          #include "hal_drivers.h"
     71          #include "hal_key.h"
     72          #if defined ( LCD_SUPPORTED )
     73            #include "hal_lcd.h"
     74          #endif
     75          #include "hal_led.h"
     76          #include "hal_uart.h"
     77          
     78          /*********************************************************************
     79           * MACROS
     80           */
     81          
     82          /*********************************************************************
     83           * CONSTANTS
     84           */
     85          
     86          #if !defined( SERIAL_APP_PORT )
     87          #define SERIAL_APP_PORT  0
     88          #endif
     89          
     90          #if !defined( SERIAL_APP_BAUD )
     91          #define SERIAL_APP_BAUD  HAL_UART_BR_38400
     92          //#define SERIAL_APP_BAUD  HAL_UART_BR_115200
     93          #endif
     94          
     95          // When the Rx buf space is less than this threshold, invoke the Rx callback.
     96          #if !defined( SERIAL_APP_THRESH )
     97          #define SERIAL_APP_THRESH  64
     98          #endif
     99          
    100          #if !defined( SERIAL_APP_RX_SZ )
    101          #define SERIAL_APP_RX_SZ  128
    102          #endif
    103          
    104          #if !defined( SERIAL_APP_TX_SZ )
    105          #define SERIAL_APP_TX_SZ  128
    106          #endif
    107          
    108          // Millisecs of idle time after a byte is received before invoking Rx callback.
    109          #if !defined( SERIAL_APP_IDLE )
    110          #define SERIAL_APP_IDLE  6
    111          #endif
    112          
    113          // Loopback Rx bytes to Tx for throughput testing.
    114          #if !defined( SERIAL_APP_LOOPBACK )
    115          #define SERIAL_APP_LOOPBACK  FALSE
    116          #endif
    117          
    118          // This is the max byte count per OTA message.
    119          #if !defined( SERIAL_APP_TX_MAX )
    120          #define SERIAL_APP_TX_MAX  80
    121          #endif
    122          
    123          #define SERIAL_APP_RSP_CNT  4
    124          
    125          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    126          const cId_t RoachZStack_ClusterList[ROACHZSTACK_MAX_CLUSTERS] =
   \                     RoachZStack_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
    127          {
    128            ROACHZSTACK_CLUSTERID1,
    129            ROACHZSTACK_CLUSTERID2
    130          };
    131          

   \                                 In  segment XDATA_ROM_C, align 1
    132          const SimpleDescriptionFormat_t RoachZStack_SimpleDesc =
   \                     RoachZStack_SimpleDesc:
   \   000000   0B           DB 11
   \   000001   050F         DW 3845
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW RoachZStack_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW RoachZStack_ClusterList
    133          {
    134            ROACHZSTACK_ENDPOINT,              //  int   Endpoint;
    135            ROACHZSTACK_PROFID,                //  uint16 AppProfId[2];
    136            ROACHZSTACK_DEVICEID,              //  uint16 AppDeviceId[2];
    137            ROACHZSTACK_DEVICE_VERSION,        //  int   AppDevVer:4;
    138            ROACHZSTACK_FLAGS,                 //  int   AppFlags:4;
    139            ROACHZSTACK_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    140            (cId_t *)RoachZStack_ClusterList,  //  byte *pAppInClusterList;
    141            ROACHZSTACK_MAX_CLUSTERS,          //  byte  AppNumOutClusters;
    142            (cId_t *)RoachZStack_ClusterList   //  byte *pAppOutClusterList;
    143          };
    144          

   \                                 In  segment XDATA_ROM_C, align 1
    145          const endPointDesc_t RoachZStack_epDesc =
   \                     RoachZStack_epDesc:
   \   000000   0B           DB 11
   \   000001   ....         DW RoachZStack_TaskID
   \   000003   ....         DW RoachZStack_SimpleDesc
   \   000005   00           DB 0
    146          {
    147            ROACHZSTACK_ENDPOINT,
    148           &RoachZStack_TaskID,
    149            (SimpleDescriptionFormat_t *)&RoachZStack_SimpleDesc,
    150            noLatencyReqs
    151          };
    152          
    153          /*********************************************************************
    154           * TYPEDEFS
    155           */
    156          
    157          /*********************************************************************
    158           * GLOBAL VARIABLES
    159           */
    160          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161          uint8 RoachZStack_TaskID;    // Task ID for internal task/event processing.
   \                     RoachZStack_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    162          
    163          /*********************************************************************
    164           * EXTERNAL VARIABLES
    165           */
    166          
    167          /*********************************************************************
    168           * EXTERNAL FUNCTIONS
    169           */
    170          
    171          /*********************************************************************
    172           * LOCAL VARIABLES
    173           */
    174          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    175          static uint8 RoachZStack_MsgID;
   \                     RoachZStack_MsgID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    176          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    177          static afAddrType_t RoachZStack_TxAddr;
   \                     RoachZStack_TxAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    178          static uint8 RoachZStack_TxSeq;
   \                     RoachZStack_TxSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    179          static uint8 RoachZStack_TxBuf[SERIAL_APP_TX_MAX+1];
   \                     RoachZStack_TxBuf:
   \   000000                DS 81
   \   000051                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    180          static uint8 RoachZStack_TxLen;
   \                     RoachZStack_TxLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    181          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    182          static afAddrType_t RoachZStack_RxAddr;
   \                     RoachZStack_RxAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    183          static uint8 RoachZStack_RxSeq;
   \                     RoachZStack_RxSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    184          static uint8 RoachZStack_RspBuf[SERIAL_APP_RSP_CNT];
   \                     RoachZStack_RspBuf:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    185          
    186          /*********************************************************************
    187           * LOCAL FUNCTIONS
    188           */
    189          
    190          static void RoachZStack_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
    191          static void RoachZStack_HandleKeys( uint8 shift, uint8 keys );
    192          static void RoachZStack_ProcessMSGCmd( afIncomingMSGPacket_t *pkt );
    193          static void RoachZStack_Send(void);
    194          static void RoachZStack_Resp(void);
    195          static void RoachZStack_CallBack(uint8 port, uint8 event);
    196          
    197          /*********************************************************************
    198           * @fn      RoachZStack_Init
    199           *
    200           * @brief   This is called during OSAL tasks' initialization.
    201           *
    202           * @param   task_id - the Task ID assigned by OSAL.
    203           *
    204           * @return  none
    205           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    206          void RoachZStack_Init( uint8 task_id )
   \                     RoachZStack_Init:
    207          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 34
   \   000005   74DE         MOV     A,#-0x22
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    208            halUARTCfg_t uartConfig;
    209          
    210            RoachZStack_TaskID = task_id;
   \   00000C   90....       MOV     DPTR,#RoachZStack_TaskID
   \   00000F   F0           MOVX    @DPTR,A
    211            RoachZStack_RxSeq = 0xC3;
   \   000010   90....       MOV     DPTR,#RoachZStack_RxSeq
   \   000013   74C3         MOV     A,#-0x3d
   \   000015   F0           MOVX    @DPTR,A
    212          
    213            afRegister( (endPointDesc_t *)&RoachZStack_epDesc );
   \   000016                ; Setup parameters for call to function afRegister
   \   000016   7A..         MOV     R2,#RoachZStack_epDesc & 0xff
   \   000018   7B..         MOV     R3,#(RoachZStack_epDesc >> 8) & 0xff
   \   00001A   12....       LCALL   ??afRegister?relay
    214          
    215            RegisterForKeys( task_id );
   \   00001D                ; Setup parameters for call to function RegisterForKeys
   \   00001D   EE           MOV     A,R6
   \   00001E   F9           MOV     R1,A
   \   00001F   12....       LCALL   ??RegisterForKeys?relay
    216          
    217            uartConfig.configured           = TRUE;              // 2x30 don't care - see uart driver.
   \   000022   7405         MOV     A,#0x5
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   7401         MOV     A,#0x1
   \   000029   F0           MOVX    @DPTR,A
    218            uartConfig.baudRate             = SERIAL_APP_BAUD;
   \   00002A   7406         MOV     A,#0x6
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   7402         MOV     A,#0x2
   \   000031   F0           MOVX    @DPTR,A
    219            uartConfig.flowControl          = TRUE;
   \   000032   7407         MOV     A,#0x7
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   7401         MOV     A,#0x1
   \   000039   F0           MOVX    @DPTR,A
    220            uartConfig.flowControlThreshold = SERIAL_APP_THRESH; // 2x30 don't care - see uart driver.
   \   00003A   7408         MOV     A,#0x8
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   7440         MOV     A,#0x40
   \   000041   F0           MOVX    @DPTR,A
   \   000042   A3           INC     DPTR
   \   000043   E4           CLR     A
   \   000044   F0           MOVX    @DPTR,A
    221            uartConfig.rx.maxBufSize        = SERIAL_APP_RX_SZ;  // 2x30 don't care - see uart driver.
   \   000045   740F         MOV     A,#0xf
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   7480         MOV     A,#-0x80
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   A3           INC     DPTR
   \   00004E   E4           CLR     A
   \   00004F   F0           MOVX    @DPTR,A
    222            uartConfig.tx.maxBufSize        = SERIAL_APP_TX_SZ;  // 2x30 don't care - see uart driver.
   \   000050   7417         MOV     A,#0x17
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   7480         MOV     A,#-0x80
   \   000057   F0           MOVX    @DPTR,A
   \   000058   A3           INC     DPTR
   \   000059   E4           CLR     A
   \   00005A   F0           MOVX    @DPTR,A
    223            uartConfig.idleTimeout          = SERIAL_APP_IDLE;   // 2x30 don't care - see uart driver.
   \   00005B   740A         MOV     A,#0xa
   \   00005D   12....       LCALL   ?XSTACK_DISP0_8
   \   000060   7406         MOV     A,#0x6
   \   000062   F0           MOVX    @DPTR,A
    224            uartConfig.intEnable            = TRUE;              // 2x30 don't care - see uart driver.
   \   000063   741B         MOV     A,#0x1b
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   7401         MOV     A,#0x1
   \   00006A   F0           MOVX    @DPTR,A
    225            uartConfig.callBackFunc         = RoachZStack_CallBack;
   \   00006B   7420         MOV     A,#0x20
   \   00006D   12....       LCALL   ?XSTACK_DISP0_8
   \   000070   74..         MOV     A,#??RoachZStack_CallBack?relay & 0xff
   \   000072   F0           MOVX    @DPTR,A
   \   000073   A3           INC     DPTR
   \   000074   74..         MOV     A,#(??RoachZStack_CallBack?relay >> 8) & 0xff
   \   000076   F0           MOVX    @DPTR,A
    226            HalUARTOpen (SERIAL_APP_PORT, &uartConfig);
   \   000077                ; Setup parameters for call to function HalUARTOpen
   \   000077   7405         MOV     A,#0x5
   \   000079   12....       LCALL   ?XSTACK_DISP0_8
   \   00007C   AA82         MOV     R2,DPL
   \   00007E   AB83         MOV     R3,DPH
   \   000080   7900         MOV     R1,#0x0
   \   000082   12....       LCALL   ??HalUARTOpen?relay
    227          
    228          #if defined ( LCD_SUPPORTED )
    229            HalLcdWriteString( "RoachZStack", HAL_LCD_LINE_2 );
   \   000085                ; Setup parameters for call to function HalLcdWriteString
   \   000085   7902         MOV     R1,#0x2
   \   000087   7A..         MOV     R2,#`?<Constant "RoachZStack">` & 0xff
   \   000089   7B..         MOV     R3,#(`?<Constant "RoachZStack">` >> 8) & 0xff
   \   00008B   12....       LCALL   ??HalLcdWriteString?relay
    230          #endif
    231            
    232            ZDO_RegisterForZDOMsg( RoachZStack_TaskID, End_Device_Bind_rsp );
   \   00008E                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00008E   7A20         MOV     R2,#0x20
   \   000090   7B80         MOV     R3,#-0x80
   \   000092   90....       MOV     DPTR,#RoachZStack_TaskID
   \   000095   E0           MOVX    A,@DPTR
   \   000096   F9           MOV     R1,A
   \   000097   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    233            ZDO_RegisterForZDOMsg( RoachZStack_TaskID, Match_Desc_rsp );
   \   00009A                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00009A   7A06         MOV     R2,#0x6
   \   00009C   7B80         MOV     R3,#-0x80
   \   00009E   90....       MOV     DPTR,#RoachZStack_TaskID
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   F9           MOV     R1,A
   \   0000A3   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    234            
    235            byte buf[5] = {1,2,3,4,5};
   \   0000A6   85..82       MOV     DPL,?XSP + 0
   \   0000A9   85..83       MOV     DPH,?XSP + 1
   \   0000AC   AC82         MOV     R4,DPL
   \   0000AE   AD83         MOV     R5,DPH
   \   0000B0   7583..       MOV     DPH,#(`?<Constant {1, 2, 3, 4, 5}>` >> 8) & 0xff
   \   0000B3   7582..       MOV     DPL,#`?<Constant {1, 2, 3, 4, 5}>` & 0xff
   \   0000B6   7405         MOV     A,#0x5
   \   0000B8   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    236            HalUARTWrite (SERIAL_APP_PORT, buf, sizeof(buf));
   \   0000BB                ; Setup parameters for call to function HalUARTWrite
   \   0000BB   7C05         MOV     R4,#0x5
   \   0000BD   FD           MOV     R5,A
   \   0000BE   85..82       MOV     DPL,?XSP + 0
   \   0000C1   85..83       MOV     DPH,?XSP + 1
   \   0000C4   AA82         MOV     R2,DPL
   \   0000C6   AB83         MOV     R3,DPH
   \   0000C8   F9           MOV     R1,A
   \   0000C9   12....       LCALL   ??HalUARTWrite?relay
    237          }
   \   0000CC   7422         MOV     A,#0x22
   \   0000CE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D1                REQUIRE ?Subroutine0
   \   0000D1                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    238          
    239          /*********************************************************************
    240           * @fn      RoachZStack_ProcessEvent
    241           *
    242           * @brief   Generic Application Task event processor.
    243           *
    244           * @param   task_id  - The OSAL assigned task ID.
    245           * @param   events   - Bit map of events to process.
    246           *
    247           * @return  Event flags of all unprocessed events.
    248           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    249          UINT16 RoachZStack_ProcessEvent( uint8 task_id, UINT16 events )
   \                     RoachZStack_ProcessEvent:
    250          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
    251            (void)task_id;  // Intentionally unreferenced parameter
    252            
    253            if ( events & SYS_EVENT_MSG )
   \   00000E   EB           MOV     A,R3
   \   00000F   5480         ANL     A,#0x80
   \   000011   701C         JNZ     ??RoachZStack_ProcessEvent_0
    254            {
    255              afIncomingMSGPacket_t *MSGpkt;
    256          
    257              while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( RoachZStack_TaskID )) )
    258              {
    259                switch ( MSGpkt->hdr.event )
    260                {
    261                case ZDO_CB_MSG:
    262                  RoachZStack_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    263                  break;
    264                    
    265                case KEY_CHANGE:
    266                  RoachZStack_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    267                  break;
    268          
    269                case AF_INCOMING_MSG_CMD:
    270                  RoachZStack_ProcessMSGCmd( MSGpkt );
    271                  break;
    272          
    273                default:
    274                  break;
    275                }
    276          
    277                osal_msg_deallocate( (uint8 *)MSGpkt );
    278              }
    279          
    280              return ( events ^ SYS_EVENT_MSG );
    281            }
    282          
    283            if ( events & ROACHZSTACK_SEND_EVT )
   \   000013   EA           MOV     A,R2
   \   000014   A2E0         MOV     C,0xE0 /* A   */.0
   \   000016   4003         JC      $+5
   \   000018   02....       LJMP    ??RoachZStack_ProcessEvent_1 & 0xFFFF
    284            {
    285              RoachZStack_Send();
   \   00001B                ; Setup parameters for call to function RoachZStack_Send
   \   00001B   12....       LCALL   ??RoachZStack_Send?relay
    286              return ( events ^ ROACHZSTACK_SEND_EVT );
   \   00001E   E5..         MOV     A,?V0 + 0
   \   000020   6401         XRL     A,#0x1
   \   000022   02....       LJMP    ??RoachZStack_ProcessEvent_2 & 0xFFFF
    287            }
   \                     ??RoachZStack_ProcessEvent_3:
   \   000025                ; Setup parameters for call to function RoachZStack_ProcessMSGCmd
   \   000025   12....       LCALL   ??RoachZStack_ProcessMSGCmd?relay
   \                     ??RoachZStack_ProcessEvent_4:
   \   000028                ; Setup parameters for call to function osal_msg_deallocate
   \   000028   AA..         MOV     R2,?V0 + 2
   \   00002A   AB..         MOV     R3,?V0 + 3
   \   00002C   12....       LCALL   ??osal_msg_deallocate?relay
   \                     ??RoachZStack_ProcessEvent_0:
   \   00002F                ; Setup parameters for call to function osal_msg_receive
   \   00002F   90....       MOV     DPTR,#RoachZStack_TaskID
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F9           MOV     R1,A
   \   000034   12....       LCALL   ??osal_msg_receive?relay
   \   000037   8A..         MOV     ?V0 + 2,R2
   \   000039   8B..         MOV     ?V0 + 3,R3
   \   00003B   EA           MOV     A,R2
   \   00003C   45..         ORL     A,?V0 + 3
   \   00003E   7003         JNZ     $+5
   \   000040   02....       LJMP    ??RoachZStack_ProcessEvent_5 & 0xFFFF
   \   000043   8A82         MOV     DPL,R2
   \   000045   8B83         MOV     DPH,R3
   \   000047   E0           MOVX    A,@DPTR
   \   000048   24E6         ADD     A,#-0x1a
   \   00004A   60D9         JZ      ??RoachZStack_ProcessEvent_3
   \   00004C   245A         ADD     A,#0x5a
   \   00004E   7003         JNZ     $+5
   \   000050   02....       LJMP    ??RoachZStack_ProcessEvent_6 & 0xFFFF
   \   000053   24ED         ADD     A,#-0x13
   \   000055   70D1         JNZ     ??RoachZStack_ProcessEvent_4
   \   000057   EA           MOV     A,R2
   \   000058   240C         ADD     A,#0xc
   \   00005A   F582         MOV     DPL,A
   \   00005C   EB           MOV     A,R3
   \   00005D   3400         ADDC    A,#0x0
   \   00005F   F583         MOV     DPH,A
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F5..         MOV     ?V0 + 4,A
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   F5..         MOV     ?V0 + 5,A
   \   000068   78..         MOV     R0,#?V0 + 4
   \   00006A   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for RoachZStack_ProcessEvent>_0`:
   \   00006D   0000         DW        0
   \   00006F   0200         DW        2
   \   000071   0680         DW        32774
   \   000073   ....         DW        ??RoachZStack_ProcessEvent_7
   \   000075   2080         DW        32800
   \   000077   ....         DW        ??RoachZStack_ProcessEvent_8
   \   000079   ....         DW        ??RoachZStack_ProcessEvent_4
   \                     ??RoachZStack_ProcessEvent_7:
   \   00007B                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   00007B   12....       LCALL   ??ZDO_ParseEPListRsp?relay
   \   00007E   8A..         MOV     ?V0 + 4,R2
   \   000080   8B..         MOV     ?V0 + 5,R3
   \   000082   AE..         MOV     R6,?V0 + 4
   \   000084   AF..         MOV     R7,?V0 + 5
   \   000086   EE           MOV     A,R6
   \   000087   4F           ORL     A,R7
   \   000088   609E         JZ      ??RoachZStack_ProcessEvent_4
   \   00008A   8E82         MOV     DPL,R6
   \   00008C   8F83         MOV     DPH,R7
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   7032         JNZ     ??RoachZStack_ProcessEvent_9
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   E0           MOVX    A,@DPTR
   \   000095   602C         JZ      ??RoachZStack_ProcessEvent_9
   \   000097   90....       MOV     DPTR,#RoachZStack_TxAddr + 8
   \   00009A   7402         MOV     A,#0x2
   \   00009C   F0           MOVX    @DPTR,A
   \   00009D   8E82         MOV     DPL,R6
   \   00009F   8F83         MOV     DPH,R7
   \   0000A1   A3           INC     DPTR
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   F8           MOV     R0,A
   \   0000A4   A3           INC     DPTR
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   F9           MOV     R1,A
   \   0000A7   90....       MOV     DPTR,#RoachZStack_TxAddr
   \   0000AA   E8           MOV     A,R0
   \   0000AB   F0           MOVX    @DPTR,A
   \   0000AC   A3           INC     DPTR
   \   0000AD   E9           MOV     A,R1
   \   0000AE   F0           MOVX    @DPTR,A
   \   0000AF   8E82         MOV     DPL,R6
   \   0000B1   8F83         MOV     DPH,R7
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   90....       MOV     DPTR,#RoachZStack_TxAddr + 9
   \   0000BB   F0           MOVX    @DPTR,A
   \   0000BC                ; Setup parameters for call to function HalLedSet
   \   0000BC   7A01         MOV     R2,#0x1
   \   0000BE   7908         MOV     R1,#0x8
   \   0000C0   12....       LCALL   ??HalLedSet?relay
   \                     ??RoachZStack_ProcessEvent_9:
   \   0000C3                ; Setup parameters for call to function osal_mem_free
   \   0000C3   EE           MOV     A,R6
   \   0000C4   FA           MOV     R2,A
   \   0000C5   EF           MOV     A,R7
   \   0000C6   FB           MOV     R3,A
   \   0000C7   12....       LCALL   ??osal_mem_free?relay
   \   0000CA   02....       LJMP    ??RoachZStack_ProcessEvent_4 & 0xFFFF
   \                     ??RoachZStack_ProcessEvent_8:
   \   0000CD   EA           MOV     A,R2
   \   0000CE   2413         ADD     A,#0x13
   \   0000D0   F582         MOV     DPL,A
   \   0000D2   EB           MOV     A,R3
   \   0000D3   12....       LCALL   ??Subroutine6_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000D6   700A         JNZ     ??RoachZStack_ProcessEvent_10
   \   0000D8                ; Setup parameters for call to function HalLedSet
   \   0000D8   7A01         MOV     R2,#0x1
   \                     ??RoachZStack_ProcessEvent_11:
   \   0000DA   7908         MOV     R1,#0x8
   \   0000DC   12....       LCALL   ??HalLedSet?relay
   \   0000DF   02....       LJMP    ??RoachZStack_ProcessEvent_4 & 0xFFFF
   \                     ??RoachZStack_ProcessEvent_10:
   \   0000E2                ; Setup parameters for call to function HalLedSet
   \   0000E2   7A04         MOV     R2,#0x4
   \   0000E4   80F4         SJMP    ??RoachZStack_ProcessEvent_11
   \                     ??RoachZStack_ProcessEvent_6:
   \   0000E6   A3           INC     DPTR
   \   0000E7   A3           INC     DPTR
   \   0000E8   A3           INC     DPTR
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   FF           MOV     R7,A
   \   0000EB   8A82         MOV     DPL,R2
   \   0000ED   8B83         MOV     DPH,R3
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   6003         JZ      $+5
   \   0000F4   02....       LJMP    ??RoachZStack_ProcessEvent_4 & 0xFFFF
   \   0000F7   EF           MOV     A,R7
   \   0000F8   A2E1         MOV     C,0xE0 /* A   */.1
   \   0000FA   5060         JNC     ??RoachZStack_ProcessEvent_12
   \   0000FC                ; Setup parameters for call to function HalLedSet
   \   0000FC   7A00         MOV     R2,#0x0
   \   0000FE   7908         MOV     R1,#0x8
   \   000100   12....       LCALL   ??HalLedSet?relay
   \   000103   7408         MOV     A,#0x8
   \   000105   12....       LCALL   ?XSTACK_DISP0_8
   \   000108   7402         MOV     A,#0x2
   \   00010A   F0           MOVX    @DPTR,A
   \   00010B   85..82       MOV     DPL,?XSP + 0
   \   00010E   85..83       MOV     DPH,?XSP + 1
   \   000111   E4           CLR     A
   \   000112   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000115                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   000115   F5..         MOV     ?V0 + 6,A
   \   000117   78..         MOV     R0,#?V0 + 6
   \   000119   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00011C   78..         MOV     R0,#?V0 + 4
   \   00011E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000121   75..02       MOV     ?V0 + 6,#0x2
   \   000124   78..         MOV     R0,#?V0 + 6
   \   000126   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000129   78..         MOV     R0,#?V0 + 4
   \   00012B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00012E   75..02       MOV     ?V0 + 4,#0x2
   \   000131   78..         MOV     R0,#?V0 + 4
   \   000133   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000136   75..05       MOV     ?V0 + 4,#0x5
   \   000139   75..0F       MOV     ?V0 + 5,#0xf
   \   00013C   78..         MOV     R0,#?V0 + 4
   \   00013E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000141                ; Setup parameters for call to function NLME_GetShortAddr
   \   000141   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000144   EA           MOV     A,R2
   \   000145   FC           MOV     R4,A
   \   000146   EB           MOV     A,R3
   \   000147   FD           MOV     R5,A
   \   000148   740B         MOV     A,#0xb
   \   00014A   F9           MOV     R1,A
   \   00014B   7409         MOV     A,#0x9
   \   00014D   12....       LCALL   ?XSTACK_DISP0_8
   \   000150   AA82         MOV     R2,DPL
   \   000152   AB83         MOV     R3,DPH
   \   000154   12....       LCALL   ??ZDP_EndDeviceBindReq?relay
   \   000157   7409         MOV     A,#0x9
   \   000159   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??RoachZStack_ProcessEvent_12:
   \   00015C   EF           MOV     A,R7
   \   00015D   A2E3         MOV     C,0xE0 /* A   */.3
   \   00015F   4003         JC      $+5
   \   000161   02....       LJMP    ??RoachZStack_ProcessEvent_4 & 0xFFFF
   \   000164                ; Setup parameters for call to function HalLedSet
   \   000164   7A00         MOV     R2,#0x0
   \   000166   7908         MOV     R1,#0x8
   \   000168   12....       LCALL   ??HalLedSet?relay
   \   00016B   7408         MOV     A,#0x8
   \   00016D   12....       LCALL   ?XSTACK_DISP0_8
   \   000170   740F         MOV     A,#0xf
   \   000172   F0           MOVX    @DPTR,A
   \   000173   85..82       MOV     DPL,?XSP + 0
   \   000176   85..83       MOV     DPH,?XSP + 1
   \   000179   74FF         MOV     A,#-0x1
   \   00017B   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00017E                ; Setup parameters for call to function ZDP_MatchDescReq
   \   00017E   75..00       MOV     ?V0 + 6,#0x0
   \   000181   78..         MOV     R0,#?V0 + 6
   \   000183   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000186   78..         MOV     R0,#?V0 + 4
   \   000188   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00018B   75..02       MOV     ?V0 + 6,#0x2
   \   00018E   78..         MOV     R0,#?V0 + 6
   \   000190   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000193   78..         MOV     R0,#?V0 + 4
   \   000195   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000198   75..05       MOV     ?V0 + 4,#0x5
   \   00019B   75..0F       MOV     ?V0 + 5,#0xf
   \   00019E   78..         MOV     R0,#?V0 + 4
   \   0001A0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A3   7902         MOV     R1,#0x2
   \   0001A5   7CFF         MOV     R4,#-0x1
   \   0001A7   7DFF         MOV     R5,#-0x1
   \   0001A9   7408         MOV     A,#0x8
   \   0001AB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AE   AA82         MOV     R2,DPL
   \   0001B0   AB83         MOV     R3,DPH
   \   0001B2   12....       LCALL   ??ZDP_MatchDescReq?relay
   \   0001B5   7408         MOV     A,#0x8
   \   0001B7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001BA   02....       LJMP    ??RoachZStack_ProcessEvent_4 & 0xFFFF
   \                     ??RoachZStack_ProcessEvent_5:
   \   0001BD   AA..         MOV     R2,?V0 + 0
   \   0001BF   E5..         MOV     A,?V0 + 1
   \   0001C1   6480         XRL     A,#0x80
   \   0001C3   FB           MOV     R3,A
   \   0001C4   8063         SJMP    ??RoachZStack_ProcessEvent_13
    288          
    289            if ( events & ROACHZSTACK_RESP_EVT )
   \                     ??RoachZStack_ProcessEvent_1:
   \   0001C6   5402         ANL     A,#0x2
   \   0001C8   605B         JZ      ??RoachZStack_ProcessEvent_14
    290            {
    291              RoachZStack_Resp();
   \   0001CA                ; Setup parameters for call to function AF_DataRequest
   \   0001CA   75..1E       MOV     ?V0 + 2,#0x1e
   \   0001CD   78..         MOV     R0,#?V0 + 2
   \   0001CF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001D2   75....       MOV     ?V0 + 2,#RoachZStack_MsgID & 0xff
   \   0001D5   75....       MOV     ?V0 + 3,#(RoachZStack_MsgID >> 8) & 0xff
   \   0001D8   78..         MOV     R0,#?V0 + 2
   \   0001DA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001DD   75....       MOV     ?V0 + 2,#RoachZStack_RspBuf & 0xff
   \   0001E0   75....       MOV     ?V0 + 3,#(RoachZStack_RspBuf >> 8) & 0xff
   \   0001E3   78..         MOV     R0,#?V0 + 2
   \   0001E5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001E8   75..04       MOV     ?V0 + 2,#0x4
   \   0001EB   75..00       MOV     ?V0 + 3,#0x0
   \   0001EE   78..         MOV     R0,#?V0 + 2
   \   0001F0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001F3   75..02       MOV     ?V0 + 2,#0x2
   \   0001F6   78..         MOV     R0,#?V0 + 2
   \   0001F8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001FB   7900         MOV     R1,#0x0
   \   0001FD   7C..         MOV     R4,#RoachZStack_epDesc & 0xff
   \   0001FF   7D..         MOV     R5,#(RoachZStack_epDesc >> 8) & 0xff
   \   000201   7A..         MOV     R2,#RoachZStack_RxAddr & 0xff
   \   000203   7B..         MOV     R3,#(RoachZStack_RxAddr >> 8) & 0xff
   \   000205   12....       LCALL   ??AF_DataRequest?relay
   \   000208   7409         MOV     A,#0x9
   \   00020A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00020D   E9           MOV     A,R1
   \   00020E   600C         JZ      ??RoachZStack_ProcessEvent_15
   \   000210                ; Setup parameters for call to function osal_set_event
   \   000210   7A02         MOV     R2,#0x2
   \   000212   7B00         MOV     R3,#0x0
   \   000214   90....       MOV     DPTR,#RoachZStack_TaskID
   \   000217   E0           MOVX    A,@DPTR
   \   000218   F9           MOV     R1,A
   \   000219   12....       LCALL   ??osal_set_event?relay
    292              return ( events ^ ROACHZSTACK_RESP_EVT );
   \                     ??RoachZStack_ProcessEvent_15:
   \   00021C   E5..         MOV     A,?V0 + 0
   \   00021E   6402         XRL     A,#0x2
   \                     ??RoachZStack_ProcessEvent_2:
   \   000220   FA           MOV     R2,A
   \   000221   AB..         MOV     R3,?V0 + 1
   \   000223   8004         SJMP    ??RoachZStack_ProcessEvent_13
    293            }
    294          
    295            return ( 0 );  // Discard unknown events.
   \                     ??RoachZStack_ProcessEvent_14:
   \   000225   7A00         MOV     R2,#0x0
   \   000227   7B00         MOV     R3,#0x0
   \                     ??RoachZStack_ProcessEvent_13:
   \   000229   7409         MOV     A,#0x9
   \   00022B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00022E   7F07         MOV     R7,#0x7
   \   000230   02....       LJMP    ?BANKED_LEAVE_XDATA
    296          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   F0           MOVX    @DPTR,A
   \   000003   75....       MOV     ?V0 + 4,#RoachZStack_ClusterList & 0xff
   \   000006   75....       MOV     ?V0 + 5,#(RoachZStack_ClusterList >> 8) & 0xff
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine6_0:
   \   000000   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F583         MOV     DPH,A
   \   00000A   8882         MOV     DPL,R0
   \   00000C   22           RET
    297          
    298          /*********************************************************************
    299           * @fn      RoachZStack_ProcessZDOMsgs()
    300           *
    301           * @brief   Process response messages
    302           *
    303           * @param   none
    304           *
    305           * @return  none
    306           */
    307          static void RoachZStack_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
    308          {
    309            switch ( inMsg->clusterID )
    310            {
    311              case End_Device_Bind_rsp:
    312                if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
    313                {
    314                  // Light LED
    315                  HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
    316                }
    317          #if defined(BLINK_LEDS)
    318                else
    319                {
    320                  // Flash LED to show failure
    321                  HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );
    322                }
    323          #endif
    324                break;
    325                
    326              case Match_Desc_rsp:
    327                {
    328                  ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
    329                  if ( pRsp )
    330                  {
    331                    if ( pRsp->status == ZSuccess && pRsp->cnt )
    332                    {
    333                      RoachZStack_TxAddr.addrMode = (afAddrMode_t)Addr16Bit;
    334                      RoachZStack_TxAddr.addr.shortAddr = pRsp->nwkAddr;
    335                      // Take the first endpoint, Can be changed to search through endpoints
    336                      RoachZStack_TxAddr.endPoint = pRsp->epList[0];
    337                      
    338                      // Light LED
    339                      HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
    340                    }
    341                    osal_mem_free( pRsp );
    342                  }
    343                }
    344                break;
    345            }
    346          }
    347          
    348          /*********************************************************************
    349           * @fn      RoachZStack_HandleKeys
    350           *
    351           * @brief   Handles all key events for this device.
    352           *
    353           * @param   shift - true if in shift/alt.
    354           * @param   keys  - bit field for key events.
    355           *
    356           * @return  none
    357           */
    358          void RoachZStack_HandleKeys( uint8 shift, uint8 keys )
    359          {
    360            zAddrType_t txAddr;
    361            
    362            if ( shift )
    363            {
    364              if ( keys & HAL_KEY_SW_1 )
    365              {
    366              }
    367              if ( keys & HAL_KEY_SW_2 )
    368              {
    369              }
    370              if ( keys & HAL_KEY_SW_3 )
    371              {
    372              }
    373              if ( keys & HAL_KEY_SW_4 )
    374              {
    375              }
    376            }
    377            else
    378            {
    379              if ( keys & HAL_KEY_SW_1 )
    380              {
    381              }
    382          
    383              if ( keys & HAL_KEY_SW_2 )
    384              {
    385                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    386                
    387                // Initiate an End Device Bind Request for the mandatory endpoint
    388                txAddr.addrMode = Addr16Bit;
    389                txAddr.addr.shortAddr = 0x0000; // Coordinator
    390                ZDP_EndDeviceBindReq( &txAddr, NLME_GetShortAddr(), 
    391                                      RoachZStack_epDesc.endPoint,
    392                                      ROACHZSTACK_PROFID,
    393                                      ROACHZSTACK_MAX_CLUSTERS, (cId_t *)RoachZStack_ClusterList,
    394                                      ROACHZSTACK_MAX_CLUSTERS, (cId_t *)RoachZStack_ClusterList,
    395                                      FALSE );
    396              }
    397          
    398              if ( keys & HAL_KEY_SW_3 )
    399              {
    400              }
    401          
    402              if ( keys & HAL_KEY_SW_4 )
    403              {
    404                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    405                
    406                // Initiate a Match Description Request (Service Discovery)
    407                txAddr.addrMode = AddrBroadcast;
    408                txAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
    409                ZDP_MatchDescReq( &txAddr, NWK_BROADCAST_SHORTADDR,
    410                                  ROACHZSTACK_PROFID,
    411                                  ROACHZSTACK_MAX_CLUSTERS, (cId_t *)RoachZStack_ClusterList,
    412                                  ROACHZSTACK_MAX_CLUSTERS, (cId_t *)RoachZStack_ClusterList,
    413                                  FALSE );
    414              }
    415            }
    416          }
    417          
    418          /*********************************************************************
    419           * @fn      RoachZStack_ProcessMSGCmd
    420           *
    421           * @brief   Data message processor callback. This function processes
    422           *          any incoming data - probably from other devices. Based
    423           *          on the cluster ID, perform the intended action.
    424           *
    425           * @param   pkt - pointer to the incoming message packet
    426           *
    427           * @return  TRUE if the 'pkt' parameter is being used and will be freed later,
    428           *          FALSE otherwise.
    429           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    430          void RoachZStack_ProcessMSGCmd( afIncomingMSGPacket_t *pkt )
   \                     RoachZStack_ProcessMSGCmd:
    431          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    432            uint8 stat;
    433            uint8 seqnb;
    434            uint8 delay;
    435          
    436            switch ( pkt->clusterId )
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F5..         MOV     ?V0 + 0,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F5..         MOV     ?V0 + 1,A
   \   000018   78..         MOV     R0,#?V0 + 0
   \   00001A   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for RoachZStack_ProcessMSGCmd>_0`:
   \   00001D   0100         DW        1
   \   00001F   01           DB        1
   \   000020   ....         DW        ??RoachZStack_ProcessMSGCmd_0
   \   000022   ....         DW        ??RoachZStack_ProcessMSGCmd_1
   \   000024   ....         DW        ??RoachZStack_ProcessMSGCmd_2
    437            {
    438            // A message with a serial data block to be transmitted on the serial port.
    439            case ROACHZSTACK_CLUSTERID1:
    440              // Store the address for sending and retrying.
    441              osal_memcpy(&RoachZStack_RxAddr, &(pkt->srcAddr), sizeof( afAddrType_t ));
   \                     ??RoachZStack_ProcessMSGCmd_1:
   \   000026                ; Setup parameters for call to function osal_memcpy
   \   000026   EE           MOV     A,R6
   \   000027   2406         ADD     A,#0x6
   \   000029   F5..         MOV     ?V0 + 0,A
   \   00002B   EF           MOV     A,R7
   \   00002C   3400         ADDC    A,#0x0
   \   00002E   F5..         MOV     ?V0 + 1,A
   \   000030   75..00       MOV     ?V0 + 2,#0x0
   \   000033   78..         MOV     R0,#?V0 + 0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000038   7C0C         MOV     R4,#0xc
   \   00003A   7D00         MOV     R5,#0x0
   \   00003C   7A..         MOV     R2,#RoachZStack_RxAddr & 0xff
   \   00003E   7B..         MOV     R3,#(RoachZStack_RxAddr >> 8) & 0xff
   \   000040   12....       LCALL   ??osal_memcpy?relay
   \   000043   7403         MOV     A,#0x3
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
    442          
    443              seqnb = pkt->cmd.Data[0];
   \   000048   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00004B   F5..         MOV     ?V0 + 0,A
    444          
    445              // Keep message if not a repeat packet
    446              if ( (seqnb > RoachZStack_RxSeq) ||                    // Normal
    447                  ((seqnb < 0x80 ) && ( RoachZStack_RxSeq > 0x80)) ) // Wrap-around
   \   00004D   90....       MOV     DPTR,#RoachZStack_RxSeq
   \   000050   E0           MOVX    A,@DPTR
   \   000051   C3           CLR     C
   \   000052   95..         SUBB    A,?V0 + 0
   \   000054   400D         JC      ??RoachZStack_ProcessMSGCmd_3
   \   000056   E5..         MOV     A,?V0 + 0
   \   000058   C3           CLR     C
   \   000059   9480         SUBB    A,#-0x80
   \   00005B   5040         JNC     ??RoachZStack_ProcessMSGCmd_4
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   C3           CLR     C
   \   00005F   9481         SUBB    A,#-0x7f
   \   000061   403A         JC      ??RoachZStack_ProcessMSGCmd_4
    448              {
    449                // Transmit the data on the serial port.
    450                if ( HalUARTWrite( SERIAL_APP_PORT, pkt->cmd.Data+1, (pkt->cmd.DataLength-1) ) )
   \                     ??RoachZStack_ProcessMSGCmd_3:
   \   000063                ; Setup parameters for call to function HalUARTWrite
   \   000063   EE           MOV     A,R6
   \   000064   2420         ADD     A,#0x20
   \   000066   F582         MOV     DPL,A
   \   000068   EF           MOV     A,R7
   \   000069   3400         ADDC    A,#0x0
   \   00006B   F583         MOV     DPH,A
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   24FF         ADD     A,#-0x1
   \   000070   FC           MOV     R4,A
   \   000071   A3           INC     DPTR
   \   000072   E0           MOVX    A,@DPTR
   \   000073   34FF         ADDC    A,#-0x1
   \   000075   FD           MOV     R5,A
   \   000076   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   2401         ADD     A,#0x1
   \   00007C   FA           MOV     R2,A
   \   00007D   A3           INC     DPTR
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   3400         ADDC    A,#0x0
   \   000081   FB           MOV     R3,A
   \   000082   7900         MOV     R1,#0x0
   \   000084   12....       LCALL   ??HalUARTWrite?relay
   \   000087   8B..         MOV     ?V0 + 3,R3
   \   000089   EA           MOV     A,R2
   \   00008A   45..         ORL     A,?V0 + 3
   \   00008C   6009         JZ      ??RoachZStack_ProcessMSGCmd_5
    451                {
    452                  // Save for next incoming message
    453                  RoachZStack_RxSeq = seqnb;
   \   00008E   E5..         MOV     A,?V0 + 0
   \   000090   90....       MOV     DPTR,#RoachZStack_RxSeq
   \   000093   F0           MOVX    @DPTR,A
    454                  stat = OTA_SUCCESS;
   \   000094   E4           CLR     A
   \   000095   8008         SJMP    ??RoachZStack_ProcessMSGCmd_6
    455                }
    456                else
    457                {
    458                  stat = OTA_SER_BUSY;
   \                     ??RoachZStack_ProcessMSGCmd_5:
   \   000097   7402         MOV     A,#0x2
   \   000099   7810         MOV     R0,#0x10
   \   00009B   8004         SJMP    ??RoachZStack_ProcessMSGCmd_7
    459                }
    460              }
    461              else
    462              {
    463                stat = OTA_DUP_MSG;
   \                     ??RoachZStack_ProcessMSGCmd_4:
   \   00009D   7401         MOV     A,#0x1
   \                     ??RoachZStack_ProcessMSGCmd_6:
   \   00009F   7801         MOV     R0,#0x1
    464              }
    465          
    466              // Select approproiate OTA flow-control delay.
    467              delay = (stat == OTA_SER_BUSY) ? ROACHZSTACK_NAK_DELAY : ROACHZSTACK_ACK_DELAY;
    468          
    469              // Build & send OTA response message.
    470              RoachZStack_RspBuf[0] = stat;
   \                     ??RoachZStack_ProcessMSGCmd_7:
   \   0000A1   90....       MOV     DPTR,#RoachZStack_RspBuf
   \   0000A4   F0           MOVX    @DPTR,A
    471              RoachZStack_RspBuf[1] = seqnb;
   \   0000A5   E5..         MOV     A,?V0 + 0
   \   0000A7   A3           INC     DPTR
   \   0000A8   F0           MOVX    @DPTR,A
    472              RoachZStack_RspBuf[2] = LO_UINT16( delay );
   \   0000A9   E8           MOV     A,R0
   \   0000AA   A3           INC     DPTR
   \   0000AB   F0           MOVX    @DPTR,A
    473              RoachZStack_RspBuf[3] = HI_UINT16( delay );
   \   0000AC   A3           INC     DPTR
   \   0000AD   E4           CLR     A
   \   0000AE   F0           MOVX    @DPTR,A
    474              osal_set_event( RoachZStack_TaskID, ROACHZSTACK_RESP_EVT );
   \   0000AF                ; Setup parameters for call to function osal_set_event
   \   0000AF   7A02         MOV     R2,#0x2
   \   0000B1   FB           MOV     R3,A
   \   0000B2   90....       MOV     DPTR,#RoachZStack_TaskID
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   F9           MOV     R1,A
   \   0000B7   12....       LCALL   ??osal_set_event?relay
    475              osal_stop_timerEx(RoachZStack_TaskID, ROACHZSTACK_RESP_EVT);
   \   0000BA                ; Setup parameters for call to function osal_stop_timerEx
   \   0000BA   7A02         MOV     R2,#0x2
   \   0000BC   7B00         MOV     R3,#0x0
   \   0000BE   8027         SJMP    ??RoachZStack_ProcessMSGCmd_8
    476              break;
    477          
    478            // A response to a received serial data block.
    479            case ROACHZSTACK_CLUSTERID2:
    480              if ((pkt->cmd.Data[1] == RoachZStack_TxSeq) &&
    481                 ((pkt->cmd.Data[0] == OTA_SUCCESS) || (pkt->cmd.Data[0] == OTA_DUP_MSG)))
   \                     ??RoachZStack_ProcessMSGCmd_2:
   \   0000C0   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   F8           MOV     R0,A
   \   0000C5   90....       MOV     DPTR,#RoachZStack_TxSeq
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   68           XRL     A,R0
   \   0000CA   7025         JNZ     ??RoachZStack_ProcessMSGCmd_9
   \   0000CC   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000CF   600E         JZ      ??RoachZStack_ProcessMSGCmd_10
   \   0000D1   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0000D4   A3           INC     DPTR
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   F583         MOV     DPH,A
   \   0000D8   8882         MOV     DPL,R0
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   6401         XRL     A,#0x1
   \   0000DD   7012         JNZ     ??RoachZStack_ProcessMSGCmd_9
    482              {
    483                RoachZStack_TxLen = 0;
   \                     ??RoachZStack_ProcessMSGCmd_10:
   \   0000DF   90....       MOV     DPTR,#RoachZStack_TxLen
   \   0000E2   E4           CLR     A
   \   0000E3   F0           MOVX    @DPTR,A
    484                osal_stop_timerEx(RoachZStack_TaskID, ROACHZSTACK_SEND_EVT);
   \   0000E4                ; Setup parameters for call to function osal_stop_timerEx
   \   0000E4   7A01         MOV     R2,#0x1
   \   0000E6   FB           MOV     R3,A
   \                     ??RoachZStack_ProcessMSGCmd_8:
   \   0000E7   90....       MOV     DPTR,#RoachZStack_TaskID
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   F9           MOV     R1,A
   \   0000EC   12....       LCALL   ??osal_stop_timerEx?relay
   \   0000EF   8014         SJMP    ??RoachZStack_ProcessMSGCmd_0
    485              }
    486              else
    487              {
    488                // Re-start timeout according to delay sent from other device.
    489                delay = BUILD_UINT16( pkt->cmd.Data[2], pkt->cmd.Data[3] );
    490                osal_start_timerEx( RoachZStack_TaskID, ROACHZSTACK_SEND_EVT, delay );
   \                     ??RoachZStack_ProcessMSGCmd_9:
   \   0000F1                ; Setup parameters for call to function osal_start_timerEx
   \   0000F1   12....       LCALL   ?Subroutine2 & 0xFFFF
    491              }
    492              break;
    493          
    494              default:
    495                break;
    496            }
   \                     ??CrossCallReturnLabel_1:
   \   0000F4   A3           INC     DPTR
   \   0000F5   E0           MOVX    A,@DPTR
   \   0000F6   FC           MOV     R4,A
   \   0000F7   7D00         MOV     R5,#0x0
   \   0000F9   7A01         MOV     R2,#0x1
   \   0000FB   7B00         MOV     R3,#0x0
   \   0000FD   90....       MOV     DPTR,#RoachZStack_TaskID
   \   000100   E0           MOVX    A,@DPTR
   \   000101   F9           MOV     R1,A
   \   000102   12....       LCALL   ??osal_start_timerEx?relay
    497          }
   \                     ??RoachZStack_ProcessMSGCmd_0:
   \   000105   7F04         MOV     R7,#0x4
   \   000107   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   EE           MOV     A,R6
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   EE           MOV     A,R6
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   EE           MOV     A,R6
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006                REQUIRE ??Subroutine6_0
   \   000006                ; // Fall through to label ??Subroutine6_0
    498          
    499          /*********************************************************************
    500           * @fn      RoachZStack_Send
    501           *
    502           * @brief   Send data OTA.
    503           *
    504           * @param   none
    505           *
    506           * @return  none
    507           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    508          static void RoachZStack_Send(void)
   \                     RoachZStack_Send:
    509          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    510          #if SERIAL_APP_LOOPBACK
    511            if (RoachZStack_TxLen < SERIAL_APP_TX_MAX)
    512            {
    513              RoachZStack_TxLen += HalUARTRead(SERIAL_APP_PORT, RoachZStack_TxBuf+RoachZStack_TxLen+1,
    514                                                              SERIAL_APP_TX_MAX-RoachZStack_TxLen);
    515            }
    516          
    517            if (RoachZStack_TxLen)
    518            {
    519              (void)RoachZStack_TxAddr;
    520              if (HalUARTWrite(SERIAL_APP_PORT, RoachZStack_TxBuf+1, RoachZStack_TxLen))
    521              {
    522                RoachZStack_TxLen = 0;
    523              }
    524              else
    525              {
    526                osal_set_event(RoachZStack_TaskID, ROACHZSTACK_SEND_EVT);
    527              }
    528            }
    529          #else
    530            if (!RoachZStack_TxLen && 
    531                (RoachZStack_TxLen = HalUARTRead(SERIAL_APP_PORT, RoachZStack_TxBuf+1, SERIAL_APP_TX_MAX)))
   \   000005   90....       MOV     DPTR,#RoachZStack_TxLen
   \   000008   E0           MOVX    A,@DPTR
   \   000009   701E         JNZ     ??RoachZStack_Send_0
   \   00000B                ; Setup parameters for call to function HalUARTRead
   \   00000B   7C50         MOV     R4,#0x50
   \   00000D   7D00         MOV     R5,#0x0
   \   00000F   7A..         MOV     R2,#(RoachZStack_TxBuf + 1) & 0xff
   \   000011   7B..         MOV     R3,#((RoachZStack_TxBuf + 1) >> 8) & 0xff
   \   000013   7900         MOV     R1,#0x0
   \   000015   12....       LCALL   ??HalUARTRead?relay
   \   000018   EA           MOV     A,R2
   \   000019   90....       MOV     DPTR,#RoachZStack_TxLen
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   6066         JZ      ??RoachZStack_Send_1
    532            {
    533              // Pre-pend sequence number to the Tx message.
    534              RoachZStack_TxBuf[0] = ++RoachZStack_TxSeq;
   \   00001F   90....       MOV     DPTR,#RoachZStack_TxSeq
   \   000022   E0           MOVX    A,@DPTR
   \   000023   04           INC     A
   \   000024   F0           MOVX    @DPTR,A
   \   000025   90....       MOV     DPTR,#RoachZStack_TxBuf
   \   000028   F0           MOVX    @DPTR,A
    535            }
    536          
    537            if (RoachZStack_TxLen)
    538            {
    539              if (afStatus_SUCCESS != AF_DataRequest(&RoachZStack_TxAddr,
    540                                                     (endPointDesc_t *)&RoachZStack_epDesc,
    541                                                      ROACHZSTACK_CLUSTERID1,
    542                                                      RoachZStack_TxLen+1, RoachZStack_TxBuf,
    543                                                      &RoachZStack_MsgID, 0, AF_DEFAULT_RADIUS))
   \                     ??RoachZStack_Send_0:
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0 + 0,#RoachZStack_MsgID & 0xff
   \   000034   75....       MOV     ?V0 + 1,#(RoachZStack_MsgID >> 8) & 0xff
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   75....       MOV     ?V0 + 0,#RoachZStack_TxBuf & 0xff
   \   00003F   75....       MOV     ?V0 + 1,#(RoachZStack_TxBuf >> 8) & 0xff
   \   000042   78..         MOV     R0,#?V0 + 0
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000047   90....       MOV     DPTR,#RoachZStack_TxLen
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   2401         ADD     A,#0x1
   \   00004D   F5..         MOV     ?V0 + 0,A
   \   00004F   E4           CLR     A
   \   000050   3400         ADDC    A,#0x0
   \   000052   F5..         MOV     ?V0 + 1,A
   \   000054   78..         MOV     R0,#?V0 + 0
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000059   75..01       MOV     ?V0 + 0,#0x1
   \   00005C   75..00       MOV     ?V0 + 1,#0x0
   \   00005F   78..         MOV     R0,#?V0 + 0
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000064   7900         MOV     R1,#0x0
   \   000066   7C..         MOV     R4,#RoachZStack_epDesc & 0xff
   \   000068   7D..         MOV     R5,#(RoachZStack_epDesc >> 8) & 0xff
   \   00006A   7A..         MOV     R2,#RoachZStack_TxAddr & 0xff
   \   00006C   7B..         MOV     R3,#(RoachZStack_TxAddr >> 8) & 0xff
   \   00006E   12....       LCALL   ??AF_DataRequest?relay
   \   000071   7409         MOV     A,#0x9
   \   000073   12....       LCALL   ?DEALLOC_XSTACK8
   \   000076   E9           MOV     A,R1
   \   000077   600C         JZ      ??RoachZStack_Send_1
    544              {
    545                osal_set_event(RoachZStack_TaskID, ROACHZSTACK_SEND_EVT);
   \   000079                ; Setup parameters for call to function osal_set_event
   \   000079   7A01         MOV     R2,#0x1
   \   00007B   7B00         MOV     R3,#0x0
   \   00007D   90....       MOV     DPTR,#RoachZStack_TaskID
   \   000080   E0           MOVX    A,@DPTR
   \   000081   F9           MOV     R1,A
   \   000082   12....       LCALL   ??osal_set_event?relay
    546              }
    547            }
    548          #endif
    549          }
   \                     ??RoachZStack_Send_1:
   \   000085   7F02         MOV     R7,#0x2
   \   000087   02....       LJMP    ?BANKED_LEAVE_XDATA
    550          
    551          /*********************************************************************
    552           * @fn      RoachZStack_Resp
    553           *
    554           * @brief   Send data OTA.
    555           *
    556           * @param   none
    557           *
    558           * @return  none
    559           */
    560          static void RoachZStack_Resp(void)
    561          {
    562            if (afStatus_SUCCESS != AF_DataRequest(&RoachZStack_RxAddr,
    563                                                   (endPointDesc_t *)&RoachZStack_epDesc,
    564                                                    ROACHZSTACK_CLUSTERID2,
    565                                                    SERIAL_APP_RSP_CNT, RoachZStack_RspBuf,
    566                                                   &RoachZStack_MsgID, 0, AF_DEFAULT_RADIUS))
    567            {
    568              osal_set_event(RoachZStack_TaskID, ROACHZSTACK_RESP_EVT);
    569            }
    570          }
    571          
    572          /*********************************************************************
    573           * @fn      RoachZStack_CallBack
    574           *
    575           * @brief   Send data OTA.
    576           *
    577           * @param   port - UART port.
    578           * @param   event - the UART port event flag.
    579           *
    580           * @return  none
    581           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    582          static void RoachZStack_CallBack(uint8 port, uint8 event)
   \                     RoachZStack_CallBack:
    583          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    584            (void)port;
    585          
    586            if ((event & (HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT)) &&
    587          #if SERIAL_APP_LOOPBACK
    588                (RoachZStack_TxLen < SERIAL_APP_TX_MAX))
    589          #else
    590                !RoachZStack_TxLen)
   \   000007   7407         MOV     A,#0x7
   \   000009   5E           ANL     A,R6
   \   00000A   6009         JZ      ??RoachZStack_CallBack_0
   \   00000C   90....       MOV     DPTR,#RoachZStack_TxLen
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   7003         JNZ     ??RoachZStack_CallBack_0
    591          #endif
    592            {
    593              RoachZStack_Send();
   \   000012                ; Setup parameters for call to function RoachZStack_Send
   \   000012   12....       LCALL   ??RoachZStack_Send?relay
    594            }
    595          }
   \                     ??RoachZStack_CallBack_0:
   \   000015   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??RoachZStack_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    RoachZStack_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??RoachZStack_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    RoachZStack_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??RoachZStack_ProcessMSGCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    RoachZStack_ProcessMSGCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??RoachZStack_Send?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    RoachZStack_Send

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??RoachZStack_CallBack?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    RoachZStack_CallBack

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "RoachZStack">`:
   \   000000   526F6163     DB "RoachZStack"
   \            685A5374
   \            61636B00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {1, 2, 3, 4, 5}>`:
   \   000000   01           DB 1
   \   000001   02           DB 2
   \   000002   03           DB 3
   \   000003   04           DB 4
   \   000004   05           DB 5
    596          
    597          /*********************************************************************
    598          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       0      0      9  RoachZStack_CallBack
                          0 0  9 -> RoachZStack_Send
       2      0     43  RoachZStack_Init
                          0 0 43 -> HalLcdWriteString
                          0 0 43 -> HalUARTOpen
                          0 0 43 -> HalUARTWrite
                          0 0 43 -> RegisterForKeys
                          0 0 43 -> ZDO_RegisterForZDOMsg
                          0 0 43 -> afRegister
       0      0     33  RoachZStack_ProcessEvent
                          0 0 33 -> AF_DataRequest
                          0 0 24 -> HalLedSet
                          0 0 33 -> NLME_GetShortAddr
                          0 0 24 -> RoachZStack_ProcessMSGCmd
                          0 0 24 -> RoachZStack_Send
                          0 0 24 -> ZDO_ParseEPListRsp
                          0 0 33 -> ZDP_EndDeviceBindReq
                          0 0 32 -> ZDP_MatchDescReq
                          0 0 24 -> osal_mem_free
                          0 0 24 -> osal_msg_deallocate
                          0 0 24 -> osal_msg_receive
                          0 0 24 -> osal_set_event
       0      0     39  RoachZStack_ProcessMSGCmd
                          0 0 12 -> HalUARTWrite
                          0 0 15 -> osal_memcpy
                          0 0 12 -> osal_set_event
                          0 0 12 -> osal_start_timerEx
                          0 0 12 -> osal_stop_timerEx
       0      0     43  RoachZStack_Send
                          0 0 19 -> AF_DataRequest
                          0 0 10 -> HalUARTRead
                          0 0 10 -> osal_set_event


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?<Constant "RoachZStack">
       5  ?<Constant {1, 2, 3, 4, 5}>
       6  ??RoachZStack_CallBack?relay
       6  ??RoachZStack_Init?relay
       6  ??RoachZStack_ProcessEvent?relay
       6  ??RoachZStack_ProcessMSGCmd?relay
       6  ??RoachZStack_Send?relay
       5  ??Subroutine6_0
       5  ?Subroutine0
       6  ?Subroutine1
      11  ?Subroutine2
      10  ?Subroutine3
      11  ?Subroutine4
      13  ?Subroutine5
      24  RoachZStack_CallBack
       4  RoachZStack_ClusterList
     209  RoachZStack_Init
       1  RoachZStack_MsgID
     563  RoachZStack_ProcessEvent
     266  RoachZStack_ProcessMSGCmd
       4  RoachZStack_RspBuf
      12  RoachZStack_RxAddr
       1  RoachZStack_RxSeq
     138  RoachZStack_Send
      12  RoachZStack_SimpleDesc
       1  RoachZStack_TaskID
      12  RoachZStack_TxAddr
      81  RoachZStack_TxBuf
       1  RoachZStack_TxLen
       1  RoachZStack_TxSeq
       6  RoachZStack_epDesc

 
 1 261 bytes in segment BANKED_CODE
    30 bytes in segment BANK_RELAYS
    39 bytes in segment XDATA_ROM_C
   114 bytes in segment XDATA_Z
 
 1 291 bytes of CODE  memory
    39 bytes of CONST memory
   114 bytes of XDATA memory

Errors: none
Warnings: none
