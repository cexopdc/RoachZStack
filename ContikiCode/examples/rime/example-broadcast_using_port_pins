/*
 * Copyright (c) 2007, Swedish Institute of Computer Science.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * This file is part of the Contiki operating system.
 *
 */

/**
 * \file
 *         Testing the broadcast layer in Rime
 * \author
 *         Adam Dunkels <adam@sics.se>
 */

#include "contiki.h"
#include "net/rime.h"
#include "random.h"

#include "dev/button-sensor.h"

#include "dev/leds.h"

#include <stdio.h>
#include <string.h>
/*---------------------------------------------------------------------------*/  
PROCESS(example_broadcast_process, "Broadcast example");
AUTOSTART_PROCESSES(&example_broadcast_process);
/*---------------------------------------------------------------------------*/
static unsigned int i; //line added

static void
broadcast_recv(struct broadcast_conn *c, const rimeaddr_t *from)
{
const char s[2] = "-";  //variables added
const char t[2] = ",";
char *token;

  /*printf("broadcast message received from %d.%d: '%s'\n",
         from->u8[0], from->u8[1], (char *)packetbuf_dataptr());*/
//*********************************************************************//
//Changes made. The piece of code below parses a string into multiple parts and compares the parts for address 
//of the receivers and eventually checks the task to by performed by a specific receiver.

token = strtok((char *)packetbuf_dataptr(),t);
token = strtok(NULL,t);
token = strtok(token,s);
if(strcmp(token,"11") == 0)
{
token = strtok(NULL,s);
printf("%s \n", token);
if(strcmp(token,"left") == 0)
{
    P1SEL &=~ 0x01; 
    P1DIR |= 0x01;
    LED1_PIN |= 0x01;
    for(i=0;i<60000;i++);
    for(i=0;i<60000;i++);
    //for(i=0;i<60000;i++);
    LED1_PIN &= 0x00;
    //for(i=0;i<60000;i++);
    //for(i=0;i<60000;i++); 

/*leds_on(LEDS_GREEN);
for(i=0;i<60000;i++);
leds_off(LEDS_GREEN);*/
}
if(strcmp(token,"right") == 0)
{
    P1SEL &=~ 0x02; //change starts
    P1DIR |= 0x02;
    LED2_PIN |= 0x02;
    for(i=0;i<60000;i++);
    for(i=0;i<60000;i++);
    //for(i=0;i<60000;i++);
    LED2_PIN &= 0x00;

/*leds_on(LEDS_RED);
for(i=0;i<60000;i++);
leds_off(LEDS_RED);*/
}
else
{
    P1SEL &=~ 0x01; //change starts
    P1DIR |= 0x01;
    LED1_PIN &= 0x00;
    LED2_PIN &= 0x00;
//leds_off(LEDS_ALL);
}
}

  /*if(strcmp((char *)packetbuf_dataptr(), "Hello") == 0)
   {
    printf("Turn Left \n");
   }*/
}
static const struct broadcast_callbacks broadcast_call = {broadcast_recv};
static struct broadcast_conn broadcast;
/*---------------------------------------------------------------------------*/
PROCESS_THREAD(example_broadcast_process, ev, data)
{
  static struct etimer et;

  PROCESS_EXITHANDLER(broadcast_close(&broadcast);)

  PROCESS_BEGIN();

  broadcast_open(&broadcast, 129, &broadcast_call);

  while(1) {

    /* Delay 2-4 seconds */
    etimer_set(&et, CLOCK_SECOND * 4 + random_rand() % (CLOCK_SECOND * 4));
    PROCESS_WAIT_EVENT_UNTIL(etimer_expired(&et));
    /*packetbuf_copyfrom("10-left,11-right", 17);
    broadcast_send(&broadcast);
    printf("broadcast message sent\n");

    etimer_set(&et, CLOCK_SECOND * 4 + random_rand() % (CLOCK_SECOND * 4));
    PROCESS_WAIT_EVENT_UNTIL(etimer_expired(&et));
    packetbuf_copyfrom("10-right,11-left", 17);
    broadcast_send(&broadcast);
    printf("broadcast message sent\n");

    etimer_set(&et, CLOCK_SECOND * 4 + random_rand() % (CLOCK_SECOND * 4));
    PROCESS_WAIT_EVENT_UNTIL(etimer_expired(&et));
    packetbuf_copyfrom("10-forward,11-stop", 19);
    broadcast_send(&broadcast);
    printf("broadcast message sent\n");*/
  }

  PROCESS_END();
}
/*---------------------------------------------------------------------------*/
